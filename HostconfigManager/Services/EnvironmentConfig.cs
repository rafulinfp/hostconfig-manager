using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HostconfigManager.Models;

namespace HostconfigManager.Services
{
    public class EnvironmentConfig : IEnvironmentConfig
    {
        public IEnumerable<TargetEnvironment> Environments { get; set; }

        public IEnumerable<Domain> Domains { get; set; }

        public EnvironmentConfig()
        {
            Environments = LoadEnvironment();
            Domains = LoadDomain();
        }

        public IEnumerable<TargetEnvironment> LoadEnvironment()
        {
            List<TargetEnvironment> content = new List<TargetEnvironment>();
            try
            {
                using (var file = new StreamReader(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "data", "environment.json")))
                {
                    var contentStr = file.ReadToEnd();
                    content = Newtonsoft.Json.JsonConvert.DeserializeObject<List<TargetEnvironment>>(contentStr);
                }
            }
            catch (Exception)
            {

            }

            return content;
        }

        public IEnumerable<Domain> LoadDomain()
        {
            List<Domain> content = new List<Domain>();
            try
            {
                using (var file = new StreamReader(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "data", "domain.json")))
                {
                    var contentStr = file.ReadToEnd();
                    content = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Domain>>(contentStr);
                }
            }
            catch (Exception)
            {
                ;
            }

            return content;
        }

        public bool SetEnvironment(string hostname)
        {
            // get ip address
            var ip = Environments.FirstOrDefault(s => s.Hostname == hostname)?.IpAddress;
            if (ip == null)
            {
                return false;
            }

            // generate 'hostconfig' file data
            var hostEntries = new List<string>();
            foreach (var item in Domains)
            {
                hostEntries.Add($"{ip} {item.DomainName}");
            }
            var header = $"# Host config autogenerated for environment '{hostname}' at '{DateTime.Now.ToLongDateString()} {DateTime.Now.ToLongTimeString()}' by '{Environment.UserName}'";
            try
            {
                // create backup copy
                var hostconfigPath = @"c:\Windows\System32\Drivers\etc\hosts";
                File.Copy(hostconfigPath, hostconfigPath + ".bak", true);

                // identify OS and copy accordingly 
                using (var sr = new StreamWriter(hostconfigPath))
                {
                    sr.WriteLine(header);
                    foreach (var line in hostEntries)
                    {
                        sr.WriteLine(line);
                    }
                    sr.Close();
                }
            }
            catch (Exception)
            {
                return false;
            }
          

            return true;
        }
    }
}
