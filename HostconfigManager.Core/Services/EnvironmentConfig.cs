using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using HostconfigManager.Core.Models;

namespace HostconfigManager.Core.Services
{
    public class EnvironmentConfig : IEnvironmentConfig
    {
        public IEnumerable<TargetEnvironment> Environments { get; set; }

        public IEnumerable<Domain> Domains { get; set; }

        public TargetEnvironment CurrentEnvironment { get; set; }

        public EnvironmentConfig()
        {
            Environments = LoadEnvironment();
            Domains = LoadDomain();
        }

        public IEnumerable<TargetEnvironment> LoadEnvironment()
        {
            List<TargetEnvironment> content = new List<TargetEnvironment>();
            try
            {
                using (var file = new StreamReader(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "environment.json")))
                {
                    var contentStr = file.ReadToEnd();
                    content = Newtonsoft.Json.JsonConvert.DeserializeObject<List<TargetEnvironment>>(contentStr);
                }
            }
            catch (Exception)
            {
                ;
            }

            return content;
        }

        public IEnumerable<Domain> LoadDomain()
        {
            List<Domain> content = new List<Domain>();
            try
            {
                using (var file = new StreamReader(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "domain.json")))
                {
                    var contentStr = file.ReadToEnd();
                    content = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Domain>>(contentStr);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            return content;
        }

        public bool SetEnvironment(string hostname, bool keepDefaults = true)
        {
            // get ip address
            var ip = Environments.FirstOrDefault(s => s.Hostname == hostname)?.IpAddress;
            if (ip == null)
            {
                return false;
            }

            // generate 'hostconfig' file data
            var hostEntries = new List<string>();
            foreach (var item in Domains)
            {
                hostEntries.Add($"{ip} {item.DomainName}");
            }

            var header = $"# hosts configuration autogenerated for environment '{hostname}' {Environment.NewLine}# at '{DateTime.Now.ToLongDateString()} {DateTime.Now.ToLongTimeString()}' by '{Environment.UserName}'";

            try
            {
                // identify OS
                var osPlatform = this.GetOSPlatform();
                switch (osPlatform.ToString().ToLower())
                {
                    case "windows":
                        {
                            // create backup copy
                            var hostconfigPath = @"c:\Windows\System32\Drivers\etc\hosts";
                            File.Copy(hostconfigPath, hostconfigPath + ".bak", true);

                            // copy accordingly 
                            using (var sr = new StreamWriter(hostconfigPath))
                            {
                                if (keepDefaults)
                                {
                                    sr.WriteLine(this.LoadDefault());
                                }
                                sr.WriteLine(header);
                                sr.WriteLine();
                                foreach (var line in hostEntries)
                                {
                                    sr.WriteLine(line);
                                }
                                sr.Close();
                            }

                            // update current environment
                            CurrentEnvironment = Environments.FirstOrDefault(s => s.Hostname == hostname);
                        }
                        break;
                    case "osx":
                        {
                            // create backup copy
                            var hostconfigPath = @"/etc/hosts";
                            File.Copy(hostconfigPath, hostconfigPath + ".bak", true);

                            // copy accordingly 
                            using (var sr = new StreamWriter(hostconfigPath))
                            {
                                if (keepDefaults)
                                {
                                    sr.WriteLine(this.LoadDefault());
                                }
                                sr.WriteLine(header);
                                sr.WriteLine();
                                foreach (var line in hostEntries)
                                {
                                    sr.WriteLine(line);
                                }
                                sr.Close();
                            }
                            // update current environment

                            CurrentEnvironment = Environments.FirstOrDefault(s => s.Hostname == hostname);
                            break;
                        }
                    default:
                        throw new Exception($"Unsupported OS: {osPlatform.ToString()}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return false;
            }

            return true;
        }

        public string LoadDefault()
        {
            var contentStr = string.Empty;
            try
            {
                using (var file = new StreamReader(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "data", "hosts.default")))
                {
                    contentStr = file.ReadToEnd();
                }
            }
            catch (Exception)
            {
                ;
            }

            return contentStr;
        }

        public OSPlatform GetOSPlatform()
        {
            OSPlatform osPlatform = OSPlatform.Create("Other Platform");
            // Check if it's windows 
            bool isWindows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
            osPlatform = isWindows ? OSPlatform.Windows : osPlatform;
            // Check if it's osx 
            bool isOSX = RuntimeInformation.IsOSPlatform(OSPlatform.OSX);
            osPlatform = isOSX ? OSPlatform.OSX : osPlatform;
            // Check if it's Linux 
            bool isLinux = RuntimeInformation.IsOSPlatform(OSPlatform.Linux);
            osPlatform = isLinux ? OSPlatform.Linux : osPlatform;
            return osPlatform;
        }

    }
}
